{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nolanschneider/Programming/e-commerce/src/Components/Signup.js\";\nimport React from \"react\";\nimport { Form, Input, InputNumber, Divider, Button } from \"antd\";\nimport { Redirect } from 'react-router-dom';\nimport FetchServer from \"./FetchServer\";\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 8\n  }\n};\nconst validateMessages = {\n  required: \"${label} is required!\",\n  types: {\n    email: \"${label} is not validate email!\",\n    number: \"${label} is not a validate number!\"\n  },\n  number: {\n    range: \"${label} must be between ${min} and ${max}\"\n  }\n};\n\nclass Signup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onFinish = values => {\n      //console.log(\"Values recieved from Signup.form \\n\"  + values.Name + \"\\n\" + values.Email );\n      let SIGNUP_INFOMATION = {\n        firstname: values.Name,\n        lastname: values.Name,\n        email: values.Email,\n        username: values.Username,\n        password: values.password,\n        address: values.Address\n      };\n      this.loginFetch(SIGNUP_INFOMATION);\n    };\n\n    this.onFinishFailed = errorInfo => {\n      console.log('Login.js -> Form error: ', errorInfo);\n    };\n\n    this.state = {\n      signup: false,\n      response: null\n    };\n  }\n\n  loginFetch(information) {\n    let getInfo = new FetchServer();\n    getInfo.fetchRouteServer(\"/addUser\", information, function (result, connected) {\n      console.log(`Success! => ${JSON.stringify(result)}`); // Broken, Bind state or create promise, or create function for this to be executed\n\n      this.setState({\n        response: result\n      });\n      this.connectedToServer(connected);\n    });\n  }\n\n  connectedToServer(connected) {\n    if (connected) {\n      //CONNECTED TO SERVER\n      console.log(this.state.response.signup);\n\n      if (this.state.response.signup == \"true\") {\n        console.log(\"Account Successfully Created\");\n        this.setState({\n          signup: true\n        });\n      } else {\n        // Connected TO SERVER, BUT DID NOT SUCESSFULL SIGNUP\n        console.log(\"Signup Unsuccessful, Email or username is currently in use.\");\n      }\n    } else {\n      // DID NOT CONNECT TO SERVER\n      console.log(\"Failed to connect to server\");\n    }\n  }\n\n  // Clean up render method, by making function for different render paths.\n  render() {\n    if (!this.state.signup) {\n      return this.signupRender();\n    } else {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  signupRender() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        style: {\n          color: \"#333\",\n          fontWeight: \"normal\"\n        },\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form, { ...layout,\n        onFinish: this.onFinish,\n        onFinishFailed: this.onFinishFailed,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Name\",\n          name: \"Name\",\n          rules: [{\n            required: true\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Email\",\n          name: \"Email\",\n          rules: [{\n            required: true,\n            type: \"email\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Username\",\n          name: \"Username\",\n          rules: [{\n            required: true\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"password\",\n          label: \"Password\",\n          rules: [{\n            required: true,\n            message: \"Please input your password!\"\n          }],\n          hasFeedback: true,\n          children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"confirm\",\n          label: \"Confirm Password\",\n          dependencies: [\"password\"],\n          hasFeedback: true,\n          rules: [{\n            required: true,\n            message: \"Please confirm your password!\"\n          }, ({\n            getFieldValue\n          }) => ({\n            validator(rule, value) {\n              if (!value || getFieldValue(\"password\") === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject(\"The passwords that you entered do not match!\");\n            }\n\n          })],\n          children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Address\",\n          name: \"Address\",\n          rules: [{\n            required: true\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          wrapperCol: { ...layout.wrapperCol,\n            offset: 8\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Signup;","map":{"version":3,"sources":["/Users/nolanschneider/Programming/e-commerce/src/Components/Signup.js"],"names":["React","Form","Input","InputNumber","Divider","Button","Redirect","FetchServer","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","Signup","Component","constructor","props","onFinish","values","SIGNUP_INFOMATION","firstname","Name","lastname","Email","username","Username","password","address","Address","loginFetch","onFinishFailed","errorInfo","console","log","state","signup","response","information","getInfo","fetchRouteServer","result","connected","JSON","stringify","setState","connectedToServer","render","signupRender","color","fontWeight","type","message","getFieldValue","validator","rule","value","Promise","resolve","reject","offset"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,WAAtB,EAAmCC,OAAnC,EAA4CC,MAA5C,QAA0D,MAA1D;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GADG;AAEbC,EAAAA,UAAU,EAAE;AAAED,IAAAA,IAAI,EAAE;AAAR;AAFC,CAAf;AAKA,MAAME,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE,uBADa;AAEvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,iCADF;AAELC,IAAAA,MAAM,EAAE;AAFH,GAFgB;AAMvBA,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE;AADD;AANe,CAAzB;;AAWA,MAAMC,MAAN,SAAqBlB,KAAK,CAACmB,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SA2ClBC,QA3CkB,GA2CNC,MAAD,IAAY;AAEnB;AAEA,UAAIC,iBAAiB,GAAG;AACpBC,QAAAA,SAAS,EAAEF,MAAM,CAACG,IADE;AAEpBC,QAAAA,QAAQ,EAAEJ,MAAM,CAACG,IAFG;AAGpBX,QAAAA,KAAK,EAAEQ,MAAM,CAACK,KAHM;AAIpBC,QAAAA,QAAQ,EAAEN,MAAM,CAACO,QAJG;AAKpBC,QAAAA,QAAQ,EAAER,MAAM,CAACQ,QALG;AAMpBC,QAAAA,OAAO,EAAET,MAAM,CAACU;AANI,OAAxB;AAQA,WAAKC,UAAL,CAAgBV,iBAAhB;AACH,KAxDiB;;AAAA,SAyDlBW,cAzDkB,GAyDAC,SAAD,IAAe;AAE5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,SAAxC;AAEH,KA7DiB;;AAEd,SAAKG,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAC,KADE;AAETC,MAAAA,QAAQ,EAAC;AAFA,KAAb;AAIH;;AACDP,EAAAA,UAAU,CAACQ,WAAD,EAAa;AACnB,QAAIC,OAAO,GAAG,IAAIpC,WAAJ,EAAd;AACAoC,IAAAA,OAAO,CAACC,gBAAR,CAAyB,UAAzB,EAAoCF,WAApC,EAAgD,UAASG,MAAT,EAAgBC,SAAhB,EAA0B;AACtET,MAAAA,OAAO,CAACC,GAAR,CAAa,eAAcS,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAuB,EAAlD,EADsE,CAEtE;;AACA,WAAKI,QAAL,CAAc;AACVR,QAAAA,QAAQ,EAACI;AADC,OAAd;AAGA,WAAKK,iBAAL,CAAuBJ,SAAvB;AAEH,KARD;AAUH;;AAEDI,EAAAA,iBAAiB,CAACJ,SAAD,EAAW;AACxB,QAAGA,SAAH,EAAa;AACT;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWE,QAAX,CAAoBD,MAAhC;;AACA,UAAG,KAAKD,KAAL,CAAWE,QAAX,CAAoBD,MAApB,IAA8B,MAAjC,EAAwC;AACpCH,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,aAAKW,QAAL,CACI;AACIT,UAAAA,MAAM,EAAC;AADX,SADJ;AAKH,OAPD,MAOK;AACD;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,6DAAZ;AACH;AACJ,KAdD,MAcK;AACD;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AAEH;AACJ;;AAsBD;AACAa,EAAAA,MAAM,GAAG;AACL,QAAG,CAAC,KAAKZ,KAAL,CAAWC,MAAf,EAAuB;AACnB,aAAO,KAAKY,YAAL,EAAP;AACH,KAFD,MAEK;AACD,0BACI,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH;AAEN;;AAEDA,EAAAA,YAAY,GAAG;AACb,wBACI;AAAA,8BAEI,QAAC,OAAD;AAAS,QAAA,WAAW,EAAC,MAArB;AAA4B,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE,MAAT;AAAiBC,UAAAA,UAAU,EAAE;AAA7B,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAMI,QAAC,IAAD,OAAU9C,MAAV;AAAmB,QAAA,QAAQ,EAAE,KAAKc,QAAlC;AAA4C,QAAA,cAAc,EAAE,KAAKa,cAAjE;AAAA,gCAEI,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,KAAK,EAAC,MAAjB;AAAwB,UAAA,IAAI,EAAC,MAA7B;AAAmC,UAAA,KAAK,EAAE,CAAC;AAAEtB,YAAAA,QAAQ,EAAE;AAAZ,WAAD,CAA1C;AAAA,iCACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAMI,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,KAAK,EAAC,OAAjB;AAAyB,UAAA,IAAI,EAAC,OAA9B;AAAsC,UAAA,KAAK,EAAE,CAAC;AAAEA,YAAAA,QAAQ,EAAE,IAAZ;AAAkB0C,YAAAA,IAAI,EAAE;AAAxB,WAAD,CAA7C;AAAA,iCACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBANJ,eAUI,QAAC,IAAD,CAAM,IAAN;AAAY,UAAA,KAAK,EAAC,UAAlB;AAA6B,UAAA,IAAI,EAAC,UAAlC;AAA6C,UAAA,KAAK,EAAE,CAAC;AAAE1C,YAAAA,QAAQ,EAAE;AAAZ,WAAD,CAApD;AAAA,iCACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAcI,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,IAAI,EAAC,UAAhB;AAA2B,UAAA,KAAK,EAAC,UAAjC;AAA4C,UAAA,KAAK,EAAE,CAAE;AAACA,YAAAA,QAAQ,EAAE,IAAX;AAAgB2C,YAAAA,OAAO,EAAE;AAAzB,WAAF,CAAnD;AAAgH,UAAA,WAAW,MAA3H;AAAA,iCACI,QAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAdJ,eAkBI,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,IAAI,EAAC,SAAhB;AAA0B,UAAA,KAAK,EAAC,kBAAhC;AAAoD,UAAA,YAAY,EAAE,CAAC,UAAD,CAAlE;AAA+E,UAAA,WAAW,MAA1F;AAA2F,UAAA,KAAK,EAAE,CAAE;AAAE3C,YAAAA,QAAQ,EAAE,IAAZ;AAAkB2C,YAAAA,OAAO,EAAE;AAA3B,WAAF,EAC9F,CAAC;AAAEC,YAAAA;AAAF,WAAD,MAAwB;AACpBC,YAAAA,SAAS,CAACC,IAAD,EAAOC,KAAP,EAAc;AACnB,kBAAI,CAACA,KAAD,IAAUH,aAAa,CAAC,UAAD,CAAb,KAA8BG,KAA5C,EAAmD;AAC/C,uBAAOC,OAAO,CAACC,OAAR,EAAP;AACH;;AACG,qBAAOD,OAAO,CAACE,MAAR,CACH,8CADG,CAAP;AAGP;;AARmB,WAAxB,CAD8F,CAAlG;AAAA,iCAYI,QAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAZJ;AAAA;AAAA;AAAA;AAAA,gBAlBJ,eAiCI,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,KAAK,EAAC,SAAjB;AAA2B,UAAA,IAAI,EAAC,SAAhC;AAA0C,UAAA,KAAK,EAAE,CAAC;AAAElD,YAAAA,QAAQ,EAAE;AAAZ,WAAD,CAAjD;AAAA,iCACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAjCJ,eAqCI,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,UAAU,EAAE,EAAE,GAAGL,MAAM,CAACG,UAAZ;AAAwBqD,YAAAA,MAAM,EAAE;AAAhC,WAAvB;AAAA,iCACI,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,SAAb;AAAuB,YAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBArCJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAwDD;;AArIkC;;AAuIrC,eAAe9C,MAAf","sourcesContent":["import React from \"react\";\nimport { Form, Input, InputNumber, Divider, Button } from \"antd\";\nimport {Redirect} from 'react-router-dom';\nimport FetchServer from \"./FetchServer\"\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 8 },\n};\n\nconst validateMessages = {\n  required: \"${label} is required!\",\n  types: {\n    email: \"${label} is not validate email!\",\n    number: \"${label} is not a validate number!\",\n  },\n  number: {\n    range: \"${label} must be between ${min} and ${max}\",\n  },\n};\n\nclass Signup extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            signup:false,\n            response:null\n        }\n    }\n    loginFetch(information){\n        let getInfo = new FetchServer();\n        getInfo.fetchRouteServer(\"/addUser\",information,function(result,connected){\n            console.log(`Success! => ${JSON.stringify(result)}`);\n            // Broken, Bind state or create promise, or create function for this to be executed\n            this.setState({\n                response:result\n            });\n            this.connectedToServer(connected)\n\n        });\n\n    }\n    \n    connectedToServer(connected){\n        if(connected){\n            //CONNECTED TO SERVER\n            console.log(this.state.response.signup)\n            if(this.state.response.signup == \"true\"){\n                console.log(\"Account Successfully Created\");\n                this.setState(\n                    {\n                        signup:true\n                    }\n                );\n            }else{\n                // Connected TO SERVER, BUT DID NOT SUCESSFULL SIGNUP\n                console.log(\"Signup Unsuccessful, Email or username is currently in use.\");\n            }\n        }else{\n            // DID NOT CONNECT TO SERVER\n            console.log(\"Failed to connect to server\");\n\n        }\n    }\n\n    onFinish = (values) => {\n\n        //console.log(\"Values recieved from Signup.form \\n\"  + values.Name + \"\\n\" + values.Email );\n\n        let SIGNUP_INFOMATION = {\n            firstname: values.Name,\n            lastname: values.Name,\n            email: values.Email,\n            username: values.Username,\n            password: values.password,\n            address: values.Address,\n        }\n        this.loginFetch(SIGNUP_INFOMATION);\n    }\n    onFinishFailed = (errorInfo) => {\n\n        console.log('Login.js -> Form error: ', errorInfo);\n\n    }\n\n    // Clean up render method, by making function for different render paths.\n    render() {\n        if(!this.state.signup) {\n            return this.signupRender();\n        }else{\n            return (\n                <Redirect to=\"/Login\"/>\n            )\n        }\n\n  }\n  \n  signupRender() {\n    return (\n        <div>\n\n            <Divider orientation=\"left\" style={{ color: \"#333\", fontWeight: \"normal\"}} >\n                Sign Up\n            </Divider>\n\n            <Form {...layout } onFinish={this.onFinish} onFinishFailed={this.onFinishFailed}>\n\n                <Form.Item label=\"Name\" name=\"Name\"rules={[{ required: true }]} >\n                    <Input />\n                </Form.Item>\n\n                <Form.Item label=\"Email\" name=\"Email\" rules={[{ required: true, type: \"email\" }]}>\n                    <Input />\n                </Form.Item>\n\n                <Form.Item  label=\"Username\" name=\"Username\" rules={[{ required: true }]}>\n                    <Input />\n                </Form.Item>\n\n                <Form.Item name=\"password\" label=\"Password\" rules={[ {required: true,message: \"Please input your password!\",},]}hasFeedback>\n                    <Input.Password />\n                </Form.Item>\n\n                <Form.Item name=\"confirm\" label=\"Confirm Password\"  dependencies={[\"password\"]}hasFeedback rules={[ { required: true, message: \"Please confirm your password!\",},\n                    ({ getFieldValue }) => ({\n                        validator(rule, value) {\n                            if (!value || getFieldValue(\"password\") === value) {\n                                return Promise.resolve();\n                            }\n                                return Promise.reject(\n                                    \"The passwords that you entered do not match!\"\n                                );\n                        },\n                    }),\n                ]}>\n                    <Input.Password />\n                </Form.Item>\n\n                <Form.Item label=\"Address\" name=\"Address\" rules={[{ required: true }]}>\n                    <Input />\n                </Form.Item>\n\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Item>\n\n            </Form>\n\n        </div>\n    );\n\n\n  }\n}\nexport default Signup;\n"]},"metadata":{},"sourceType":"module"}