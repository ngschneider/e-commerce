{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nolanschneider/Programming/e-commerce/src/Components/AccountSettings.js\";\nimport React from \"react\";\nimport { Form, Input, InputNumber, Button } from \"antd\";\nimport { Row, Col, Divider } from \"antd\";\nimport FormItem from \"antd/lib/form/FormItem\";\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 8\n  }\n};\nconst validateMessages = {\n  required: \"${label} is required!\",\n  types: {\n    email: \"${label} is not validate email!\",\n    number: \"${label} is not a validate number!\"\n  },\n  number: {\n    range: \"${label} must be between ${min} and ${max}\"\n  }\n};\n\nclass AccountSettings extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onFinishPassword = values => {\n      console.log(values);\n      console.log(this.props.username);\n      this.accoutSettingsFetch({\n        username: this.props.username,\n        currentPassword: values.currentPassword,\n        newPassword: values.newPassword\n      }, \"/ChangePassword\");\n    };\n\n    this.state = {\n      response: null,\n      message: \"\"\n    };\n  }\n\n  accoutSettingsFetch(LOGIN_INFORMATION, ROUTE) {\n    //console.log(LOGIN_INFORMATION);\n    // console.log(JSON.stringify(LOGIN_INFORMATION));\n    let mysqlServer = \"http://ec2-3-16-215-130.us-east-2.compute.amazonaws.com:8081\";\n    let serverRoute = ROUTE;\n    fetch(mysqlServer + serverRoute + \"\" + JSON.stringify(LOGIN_INFORMATION) + \"\").then(res => res.json()).then(result => {\n      this.setState({\n        response: result,\n        success: true\n      });\n      console.log(\"****** accountSettings.Fetch -> CONNECTTED TO SERVER *******\");\n      this.connectedToServer(true);\n    }, error => {\n      this.setState({\n        isLogin: false,\n        success: false,\n        error\n      });\n      this.connectedToServer(false);\n      console.log(\"****** accountSettings.Fetch -> \" + \" FAILED TO CONNECT TO SERVER *******\");\n    });\n  }\n\n  connectedToServer(didConnect) {\n    if (didConnect) {\n      if (this.state.response.changedPass) {\n        // Login Route responded sucessfully\n        console.log(\"SUCESSFULLY CHANGED PASSWORD\");\n        this.setState({\n          message: \"Sucessfully changed password!\"\n        });\n      } else if (!this.state.response.changedPass) {\n        console.log(\"FAILED TO CHANGE PASSWORD\");\n        this.setState({\n          message: \"Failed to change password :(\"\n        });\n      }\n    } else {//DO SOMETHING HERE IF DIDNT CONNECT TO SERVER\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        style: {\n          color: \"#333\",\n          fontWeight: \"normal\"\n        },\n        children: \"Change Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form, { ...layout,\n        onFinish: this.onFinish,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"currentPassword\",\n          label: \"Current Password\",\n          rules: [{\n            required: true,\n            message: \"Please input your password!\"\n          }],\n          hasFeedback: true,\n          children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"newPassword\",\n          label: \"New Password\",\n          rules: [{\n            required: true,\n            message: \"Please input your password!\"\n          }],\n          hasFeedback: true,\n          children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"confirm\",\n          label: \"Confirm New Password\",\n          dependencies: [\"password\"],\n          hasFeedback: true,\n          rules: [{\n            required: true,\n            message: \"Please confirm your password!\"\n          }, ({\n            getFieldValue\n          }) => ({\n            validator(rule, value) {\n              if (!value || getFieldValue(\"newPassword\") === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject(\"The two passwords that you entered do not match!\");\n            }\n\n          })],\n          children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          wrapperCol: { ...layout.wrapperCol,\n            offset: 8\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" \", this.state.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        style: {\n          color: \"#333\",\n          fontWeight: \"normal\"\n        },\n        children: \"Save Credit Card Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, { ...layout,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: [\"user\", \"Cname\"],\n          label: \"Cardholder Name\",\n          rules: [{\n            required: true\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: [\"user\", \"cardNumber\"],\n          label: \"Card Number\",\n          rules: [{\n            type: \"number\",\n            min: 0\n          }],\n          children: /*#__PURE__*/_jsxDEV(InputNumber, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: [\"user\", \"ExpM\"],\n          label: \"Experation Month\",\n          rules: [{\n            type: \"number\",\n            min: 0,\n            max: 12\n          }],\n          children: /*#__PURE__*/_jsxDEV(InputNumber, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: [\"user\", \"ExpY\"],\n          label: \"Experation Year\",\n          rules: [{\n            type: \"number\",\n            min: 0,\n            max: 9999\n          }],\n          children: /*#__PURE__*/_jsxDEV(InputNumber, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: [\"user\", \"CVV\"],\n          label: \"CVV\",\n          rules: [{\n            type: \"number\",\n            min: 0,\n            max: 999\n          }],\n          children: /*#__PURE__*/_jsxDEV(InputNumber, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          wrapperCol: { ...layout.wrapperCol,\n            offset: 8\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AccountSettings;","map":{"version":3,"sources":["/Users/nolanschneider/Programming/e-commerce/src/Components/AccountSettings.js"],"names":["React","Form","Input","InputNumber","Button","Row","Col","Divider","FormItem","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","AccountSettings","Component","constructor","props","onFinishPassword","values","console","log","username","accoutSettingsFetch","currentPassword","newPassword","state","response","message","LOGIN_INFORMATION","ROUTE","mysqlServer","serverRoute","fetch","JSON","stringify","then","res","json","result","setState","success","connectedToServer","error","isLogin","didConnect","changedPass","render","color","fontWeight","onFinish","getFieldValue","validator","rule","value","Promise","resolve","reject","offset","type","min","max"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Input, InputNumber, Button } from \"antd\";\nimport { Row, Col, Divider } from \"antd\";\nimport FormItem from \"antd/lib/form/FormItem\";\n\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 8 },\n};\n\nconst validateMessages = {\n  required: \"${label} is required!\",\n  types: {\n    email: \"${label} is not validate email!\",\n    number: \"${label} is not a validate number!\",\n  },\n  number: {\n    range: \"${label} must be between ${min} and ${max}\",\n  },\n};\n\nclass AccountSettings extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      response:null,\n      message:\"\"\n    }\n  }\n\n  accoutSettingsFetch(LOGIN_INFORMATION,ROUTE){\n    //console.log(LOGIN_INFORMATION);\n   // console.log(JSON.stringify(LOGIN_INFORMATION));\n    let mysqlServer=\"http://ec2-3-16-215-130.us-east-2.compute.amazonaws.com:8081\";\n    let serverRoute=ROUTE;\n    fetch( mysqlServer + serverRoute + \"\" +  JSON.stringify(LOGIN_INFORMATION) + \"\" )\n    .then(res => res.json())\n    .then(\n      (result) => {\n        this.setState({\n          response: result,\n          success: true\n        });\n        console.log(\"****** accountSettings.Fetch -> CONNECTTED TO SERVER *******\");\n        this.connectedToServer(true);\n      },\n      (error) => {\n        this.setState({\n          isLogin: false,\n          success: false,\n          error\n        });\n        this.connectedToServer(false)\n        console.log(\"****** accountSettings.Fetch -> \" + \" FAILED TO CONNECT TO SERVER *******\");\n      }\n    )\n  }\n  \n    connectedToServer(didConnect){      \n      \n        if(didConnect){\n    \n          if(this.state.response.changedPass){ // Login Route responded sucessfully\n  \n            console.log(\"SUCESSFULLY CHANGED PASSWORD\");\n            this.setState(\n              {\n                message:\"Sucessfully changed password!\"\n              }\n            );\n            \n  \n          } else if(!this.state.response.changedPass) {\n    \n            console.log(\"FAILED TO CHANGE PASSWORD\");\n            this.setState(\n              {\n                message:\"Failed to change password :(\"\n              }\n            );\n    \n          }\n      }else{\n  \n            //DO SOMETHING HERE IF DIDNT CONNECT TO SERVER\n      }\n      \n        \n    \n  \n    }\n    onFinishPassword = (values) => {\n      console.log(values)\n      console.log(this.props.username)\n      this.accoutSettingsFetch({username:this.props.username,currentPassword:values.currentPassword,newPassword:values.newPassword},\"/ChangePassword\")\n    }\n\n  render() {\n    return (\n      <div>\n          <Divider\n            orientation=\"left\"\n            style={{ color: \"#333\", fontWeight: \"normal\" }}\n          >\n            Change Password\n          </Divider>\n        <Form {...layout } onFinish={this.onFinish}>\n          \n        <Form.Item\n            name=\"currentPassword\"\n            label=\"Current Password\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input your password!\",\n              },\n            ]}\n            hasFeedback\n          >\n            <Input.Password />\n          </Form.Item>\n\n          <Form.Item\n            name=\"newPassword\"\n            label=\"New Password\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input your password!\",\n              },\n            ]}\n            hasFeedback\n          >\n            <Input.Password />\n          </Form.Item>\n\n          <Form.Item\n            name=\"confirm\"\n            label=\"Confirm New Password\"\n            dependencies={[\"password\"]}\n            hasFeedback\n            rules={[\n              {\n                required: true,\n                message: \"Please confirm your password!\",\n              },\n              ({ getFieldValue }) => ({\n                validator(rule, value) {\n                  if (!value || getFieldValue(\"newPassword\") === value) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject(\n                    \"The two passwords that you entered do not match!\"\n                  );\n                },\n              }),\n            ]}\n          >\n            <Input.Password />\n          </Form.Item>\n          <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n       <h3> {this.state.message} </h3>\n        <Divider\n            orientation=\"left\"\n            style={{ color: \"#333\", fontWeight: \"normal\" }}\n          >\n            Save Credit Card Info\n          </Divider>\n        <Form {...layout}>\n         \n          <Form.Item\n            name={[\"user\", \"Cname\"]}\n            label=\"Cardholder Name\"\n            rules={[{ required: true }]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name={[\"user\", \"cardNumber\"]}\n            label=\"Card Number\"\n            rules={[{ type: \"number\", min: 0 }]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item\n            name={[\"user\", \"ExpM\"]}\n            label=\"Experation Month\"\n            rules={[{ type: \"number\", min: 0, max: 12 }]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item\n            name={[\"user\", \"ExpY\"]}\n            label=\"Experation Year\"\n            rules={[{ type: \"number\", min: 0, max: 9999 }]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item\n            name={[\"user\", \"CVV\"]}\n            label=\"CVV\"\n            rules={[{ type: \"number\", min: 0, max: 999 }]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n        \n      </div>\n    );\n  }\n}\nexport default AccountSettings;"]},"metadata":{},"sourceType":"module"}