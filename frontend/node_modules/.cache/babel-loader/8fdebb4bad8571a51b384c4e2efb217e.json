{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nolanschneider/Programming/e-commerce/src/Components/Sell.js\";\nimport React from \"react\";\nimport MiniItemRow from \"./MiniItemRow.js\";\nimport MiniItem from \"./MiniItem.js\";\nimport \"./CSS_FILES/MiniItem.css\";\nimport { Row, Col, Divider } from \"antd\";\nimport { Button } from \"antd\";\nimport { Redirect } from 'react-router-dom';\nimport { isMerchant, getMerchant } from \"./Fetching/MerchantFetch\";\nconst style = {\n  background: \"#0092ff\",\n  padding: \"8px 0\"\n};\n\nclass Sell extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onButtonClick = values => {\n      this.setState({\n        additem: true\n      });\n    };\n\n    this.state = {\n      isMerchant: false,\n      // Is the user a merchant?\n      merchantId: -1,\n      connected: false,\n      //\n      currentItems: [],\n      // current products in store\n      soldItems: [],\n      // Products sold\n      response: null,\n      // response from server\n      additem: false // User Click addItem\n\n    };\n  } ///\n\n\n  sellFetch(SELL_ORDER) {\n    let mysqlServer = \"http://ec2-3-16-215-130.us-east-2.compute.amazonaws.com:8081\";\n    let serverRoute = \"/Sell:\";\n    console.log(SELL_ORDER);\n    fetch(mysqlServer + serverRoute + JSON.stringify(SELL_ORDER)).then(res => res.json()).then(result => {\n      //result = JSON.parse(result)\n      this.setState({\n        response: result,\n        currentItems: result.currentItems,\n        soldItems: result.soldItems\n      });\n      this.connectedToServer(true);\n      console.log(\"CONNECTTED TO SERVER\");\n    }, error => {\n      this.connectedToServer(false);\n      console.log(\"FAILED TO CONNECT TO SERVER\");\n    });\n  }\n\n  connectedToServer(connected) {\n    if (connected) {\n      //CONNECTED TO SERVER\n      console.log(this.state.response);\n\n      if (this.state.responce) {\n        this.setState({\n          connected: true\n        });\n      } else {// Connected TO SERVER, BUT DID NOT SUCESSFULL SIGNUP\n      }\n    } else {// DID NOT CONNECT TO SERVER\n      }\n  }\n\n  componentDidMount() {\n    console.log(\"username: \" + this.props.username); //this.sellFetch({username:this.props.username})\n    // Is the current user a merchant?\n\n    let mObj = {\n      username: this.props.username\n    };\n    isMerchant(mObj, response => {\n      this.setState({\n        isMerchant: response.merchant,\n        merchantId: response.merchantId\n      });\n\n      if (response.merchant) {\n        getMerchant({\n          merchantId: response.merchantId\n        }, response => {\n          console.log(response);\n        });\n      }\n    });\n  }\n\n  render() {\n    if (this.state.isMerchant) {\n      if (!this.state.additem) {\n        return this.merchantView();\n      } else {\n        let routePath = \"/AddItem/\" + this.props.username;\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: routePath\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 19\n        }, this);\n      }\n    } else {\n      return this.nonMerchantView();\n    }\n  }\n\n  nonMerchantView() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" You are not a merchant! Contact the server admin to signup as a merchant! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 19\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this);\n  }\n\n  merchantView() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        style: {\n          color: \"#333\",\n          fontWeight: \"normal\"\n        },\n        children: \"Unsold Items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MiniItemRow, {\n        items: this.state.currentItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        style: {\n          color: \"#333\",\n          fontWeight: \"normal\"\n        },\n        children: \"Sold Items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MiniItemRow, {\n        items: this.state.soldItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.onButtonClick,\n        type: \"primary\",\n        block: true,\n        children: \"Add Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Sell;","map":{"version":3,"sources":["/Users/nolanschneider/Programming/e-commerce/src/Components/Sell.js"],"names":["React","MiniItemRow","MiniItem","Row","Col","Divider","Button","Redirect","isMerchant","getMerchant","style","background","padding","Sell","Component","constructor","props","onButtonClick","values","setState","additem","state","merchantId","connected","currentItems","soldItems","response","sellFetch","SELL_ORDER","mysqlServer","serverRoute","console","log","fetch","JSON","stringify","then","res","json","result","connectedToServer","error","responce","componentDidMount","username","mObj","merchant","render","merchantView","routePath","nonMerchantView","color","fontWeight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport MiniItemRow from \"./MiniItemRow.js\";\nimport MiniItem from \"./MiniItem.js\";\nimport \"./CSS_FILES/MiniItem.css\";\nimport { Row, Col, Divider } from \"antd\";\nimport { Button } from \"antd\";\nimport {Redirect} from 'react-router-dom';\nimport {isMerchant, getMerchant} from \"./Fetching/MerchantFetch\";\n\nconst style = { background: \"#0092ff\", padding: \"8px 0\" };\n\nclass Sell extends React.Component {\n\n        constructor(props){\n            super(props);\n            this.state = {\n                isMerchant: false, // Is the user a merchant?\n                merchantId: -1,\n                connected:false,   //\n                currentItems:[],   // current products in store\n                soldItems:[],       // Products sold\n                response:null,     // response from server\n                additem:false       // User Click addItem\n            }\n        }\n        \n\n\n\n        ///\n        sellFetch(SELL_ORDER){\n            let mysqlServer=\"http://ec2-3-16-215-130.us-east-2.compute.amazonaws.com:8081\";\n            let serverRoute=\"/Sell:\";\n            console.log(SELL_ORDER)\n            fetch( mysqlServer + serverRoute +JSON.stringify(SELL_ORDER)  )\n            .then(res => res.json())\n            .then(\n              (result) => {\n                  //result = JSON.parse(result)\n                this.setState({\n                    response:result,\n                    currentItems:result.currentItems,\n                    soldItems:result.soldItems\n                });\n                this.connectedToServer(true);\n                console.log(\"CONNECTTED TO SERVER\");\n          \n              },\n              (error) => {\n               this.connectedToServer(false);\n                console.log(\"FAILED TO CONNECT TO SERVER\");\n        \n              }\n            )\n          }\n\n        connectedToServer(connected){\n            if(connected){\n                //CONNECTED TO SERVER\n                console.log(this.state.response)\n                if(this.state.responce ){\n                    this.setState(\n                        {\n                            connected:true\n                        }\n                    );\n                }else{\n                    // Connected TO SERVER, BUT DID NOT SUCESSFULL SIGNUP\n                }\n            }else{\n                // DID NOT CONNECT TO SERVER\n                \n            }\n        }\n\n    componentDidMount(){\n        console.log(\"username: \" + this.props.username);\n        //this.sellFetch({username:this.props.username})\n\n        // Is the current user a merchant?\n        let mObj = {\n            username:this.props.username\n        }\n\n        isMerchant(mObj, (response) => {\n            this.setState(\n                {\n                    isMerchant: response.merchant,\n                    merchantId:response.merchantId\n                }\n            );\n            if(response.merchant){\n                getMerchant({merchantId:response.merchantId}, (response) => {\n                    console.log(response);\n                });\n            }\n        });\n\n    }\n\nonButtonClick = (values) => {\n    this.setState({\n        additem:true,\n    })\n}\n\n  render() {\n\n    if(this.state.isMerchant){\n\n        if(!this.state.additem) {\n\n           return this.merchantView();\n\n        }else{\n\n            let routePath=\"/AddItem/\"+ this.props.username\n\n           return <Redirect to={routePath}/>\n\n        }\n        \n    }else{\n\n       return this.nonMerchantView();\n\n    }\n\n      \n  }\n\n  nonMerchantView(){\n\n    return (<div> <h1> You are not a merchant! Contact the server admin to signup as a merchant! </h1> </div>);\n  }\n\n  merchantView(){\n\n    return (\n        <>\n            <Divider\n            orientation=\"left\"\n            style={{ color: \"#333\", fontWeight: \"normal\" }}\n            >\n            Unsold Items\n            </Divider>\n            <MiniItemRow items={this.state.currentItems}/>\n            <Divider\n            orientation=\"left\"\n            style={{ color: \"#333\", fontWeight: \"normal\" }}\n            >\n            Sold Items\n            </Divider>\n            <MiniItemRow items={this.state.soldItems} />\n            <Button onClick={this.onButtonClick} type=\"primary\" block>\n            Add Item\n            </Button>\n        </>\n        );\n  }\n  \n}\n\nexport default Sell;"]},"metadata":{},"sourceType":"module"}