{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nolanschneider/Programming/e-commerce/src/Components/Signup.js\";\nimport React from \"react\";\nimport { Form, Input, InputNumber, Divider, Button } from \"antd\";\nimport { Redirect } from 'react-router-dom';\nimport FetchServer from \"./FetchServer\";\nimport { isMerchant } from \"./Fetching/MerchantFetch\";\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 8\n  }\n};\nconst validateMessages = {\n  required: \"${label} is required!\",\n  types: {\n    email: \"${label} is not validate email!\",\n    number: \"${label} is not a validate number!\"\n  },\n  number: {\n    range: \"${label} must be between ${min} and ${max}\"\n  }\n};\n\nclass Signup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.loginFetch = information => {\n      let getInfo = new FetchServer();\n      getInfo.fetchRouteServer(\"/addUser\", information, (result, connected) => {\n        console.log(`Success! => ${JSON.stringify(result)}`);\n        this.connectedToServer(connected, result);\n      });\n    };\n\n    this.connectedToServer = (connected, result) => {\n      console.log(\"test\");\n\n      if (connected) {\n        //CONNECTED TO SERVER\n        if (result.signup == \"true\") {\n          console.log(\"Account Successfully Created\");\n          this.setState({\n            response: result,\n            signup: true\n          });\n        } else {\n          // Connected TO SERVER, BUT DID NOT SUCESSFULL SIGNUP\n          console.log(\"Signup Unsuccessful, Email or username is currently in use.\");\n        }\n      } else {\n        // DID NOT CONNECT TO SERVER\n        console.log(\"Failed to connect to server\");\n      }\n    };\n\n    this.onFinish = values => {\n      //console.log(\"Values recieved from Signup.form \\n\"  + values.Name + \"\\n\" + values.Email );\n      let SIGNUP_INFOMATION = {\n        firstname: values.Name,\n        lastname: values.Name,\n        email: values.Email,\n        username: values.Username,\n        password: values.password,\n        address: values.Address\n      };\n      this.loginFetch(SIGNUP_INFOMATION);\n    };\n\n    this.onFinishFailed = errorInfo => {\n      console.log('Login.js -> Form error: ', errorInfo);\n    };\n\n    this.signupRender = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Divider, {\n          orientation: \"left\",\n          style: {\n            color: \"#333\",\n            fontWeight: \"normal\"\n          },\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form, { ...layout,\n          onFinish: this.onFinish,\n          onFinishFailed: this.onFinishFailed,\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Name\",\n            name: \"Name\",\n            rules: [{\n              required: true\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Email\",\n            name: \"Email\",\n            rules: [{\n              required: true,\n              type: \"email\"\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Username\",\n            name: \"Username\",\n            rules: [{\n              required: true\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"password\",\n            label: \"Password\",\n            rules: [{\n              required: true,\n              message: \"Please input your password!\"\n            }],\n            hasFeedback: true,\n            children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"confirm\",\n            label: \"Confirm Password\",\n            dependencies: [\"password\"],\n            hasFeedback: true,\n            rules: [{\n              required: true,\n              message: \"Please confirm your password!\"\n            }, ({\n              getFieldValue\n            }) => ({\n              validator(rule, value) {\n                if (!value || getFieldValue(\"password\") === value) {\n                  return Promise.resolve();\n                }\n\n                return Promise.reject(\"The passwords that you entered do not match!\");\n              }\n\n            })],\n            children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Address\",\n            name: \"Address\",\n            rules: [{\n              required: true\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            wrapperCol: { ...layout.wrapperCol,\n              offset: 8\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"primary\",\n              htmlType: \"submit\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.state = {\n      signup: false,\n      response: null\n    };\n  }\n\n  // Clean up render method, by making function for different render paths.\n  render() {\n    if (!this.state.signup) {\n      return this.signupRender();\n    } else {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default Signup;","map":{"version":3,"sources":["/Users/nolanschneider/Programming/e-commerce/src/Components/Signup.js"],"names":["React","Form","Input","InputNumber","Divider","Button","Redirect","FetchServer","isMerchant","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","Signup","Component","constructor","props","loginFetch","information","getInfo","fetchRouteServer","result","connected","console","log","JSON","stringify","connectedToServer","signup","setState","response","onFinish","values","SIGNUP_INFOMATION","firstname","Name","lastname","Email","username","Username","password","address","Address","onFinishFailed","errorInfo","signupRender","color","fontWeight","type","message","getFieldValue","validator","rule","value","Promise","resolve","reject","offset","state","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Input, InputNumber, Divider, Button } from \"antd\";\nimport {Redirect} from 'react-router-dom';\nimport FetchServer from \"./FetchServer\";\nimport {isMerchant} from \"./Fetching/MerchantFetch\";\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 8 },\n};\n\nconst validateMessages = {\n  required: \"${label} is required!\",\n  types: {\n    email: \"${label} is not validate email!\",\n    number: \"${label} is not a validate number!\",\n  },\n  number: {\n    range: \"${label} must be between ${min} and ${max}\",\n  },\n};\n\nclass Signup extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            signup:false,\n            response:null\n        }\n    }\n    loginFetch = (information) => {\n        let getInfo = new FetchServer();\n        getInfo.fetchRouteServer(\"/addUser\",information,(result,connected) => {\n            console.log(`Success! => ${JSON.stringify(result)}`);\n \n              this.connectedToServer(connected,result);\n        });\n\n    }\n    \n   connectedToServer = (connected,result) =>{\n        console.log(\"test\")\n        if(connected){\n            //CONNECTED TO SERVER\n            if(result.signup == \"true\"){\n                console.log(\"Account Successfully Created\");\n                this.setState(\n                    {\n                        response:result,\n                        signup:true\n                    }\n                );\n            }else{\n                // Connected TO SERVER, BUT DID NOT SUCESSFULL SIGNUP\n                console.log(\"Signup Unsuccessful, Email or username is currently in use.\");\n            }\n        }else{\n            // DID NOT CONNECT TO SERVER\n            console.log(\"Failed to connect to server\");\n\n        }\n    }\n\n    onFinish = (values) => {\n\n        //console.log(\"Values recieved from Signup.form \\n\"  + values.Name + \"\\n\" + values.Email );\n\n        let SIGNUP_INFOMATION = {\n            firstname: values.Name,\n            lastname: values.Name,\n            email: values.Email,\n            username: values.Username,\n            password: values.password,\n            address: values.Address,\n        }\n        this.loginFetch(SIGNUP_INFOMATION);\n    }\n    onFinishFailed = (errorInfo) => {\n\n        console.log('Login.js -> Form error: ', errorInfo);\n\n    }\n\n    // Clean up render method, by making function for different render paths.\n    render() {\n        if(!this.state.signup) {\n            return this.signupRender();\n        }else{\n            return (\n                <Redirect to=\"/Login\"/>\n            )\n        }\n\n  }\n  \n  signupRender = () => {\n    return (\n        <div>\n\n            <Divider orientation=\"left\" style={{ color: \"#333\", fontWeight: \"normal\"}} >\n                Sign Up\n            </Divider>\n\n            <Form {...layout } onFinish={this.onFinish} onFinishFailed={this.onFinishFailed}>\n\n                <Form.Item label=\"Name\" name=\"Name\"rules={[{ required: true }]} >\n                    <Input />\n                </Form.Item>\n\n                <Form.Item label=\"Email\" name=\"Email\" rules={[{ required: true, type: \"email\" }]}>\n                    <Input />\n                </Form.Item>\n\n                <Form.Item  label=\"Username\" name=\"Username\" rules={[{ required: true }]}>\n                    <Input />\n                </Form.Item>\n\n                <Form.Item name=\"password\" label=\"Password\" rules={[ {required: true,message: \"Please input your password!\",},]}hasFeedback>\n                    <Input.Password />\n                </Form.Item>\n\n                <Form.Item name=\"confirm\" label=\"Confirm Password\"  dependencies={[\"password\"]}hasFeedback rules={[ { required: true, message: \"Please confirm your password!\",},\n                    ({ getFieldValue }) => ({\n                        validator(rule, value) {\n                            if (!value || getFieldValue(\"password\") === value) {\n                                return Promise.resolve();\n                            }\n                                return Promise.reject(\n                                    \"The passwords that you entered do not match!\"\n                                );\n                        },\n                    }),\n                ]}>\n                    <Input.Password />\n                </Form.Item>\n\n                <Form.Item label=\"Address\" name=\"Address\" rules={[{ required: true }]}>\n                    <Input />\n                </Form.Item>\n\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Item>\n\n            </Form>\n\n        </div>\n    );\n\n\n  }\n}\nexport default Signup;\n"]},"metadata":{},"sourceType":"module"}