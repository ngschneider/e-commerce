{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nolanschneider/Programming/e-commerce/src/Components/PreviousOrders.js\";\nimport React from \"react\";\nimport MiniItemRow from \"./MiniItemRow.js\";\nimport MiniItem from \"./MiniItem.js\";\nimport \"./CSS_FILES/MiniItem.css\";\nimport { Row, Col, Divider } from \"antd\";\nimport { Button } from \"antd\";\nimport { Pagination } from \"antd\";\nconst style = {\n  background: \"#0092ff\",\n  padding: \"8px 0\"\n};\n\nclass PreviousOrders extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connected: false,\n      response: null\n    };\n  }\n\n  previousOrderFetch(PREVIOUS_ORDER) {\n    let mysqlServer = \"http://ec2-3-16-215-130.us-east-2.compute.amazonaws.com:8081\";\n    let serverRoute = \"/PreviousOrders:\"; //console.log(PREVIOUS_ORDER)\n\n    fetch(mysqlServer + serverRoute + \"\" + JSON.stringify(PREVIOUS_ORDER) + \"\").then(res => res.json()).then(result => {\n      let stringJSON = \"{\\\"data\\\": \" + JSON.stringify(result) + \"}\";\n      console.log(stringJSON);\n      stringJSON = JSON.parse(stringJSON); //console.log(stringJSON)\n      //let resultJSON = JSON.parse(stringJSON)\n      //console.log(\"Reponse -> \" + JSON.parse(stringJSON))\n\n      this.setState({\n        response: stringJSON\n      });\n      this.connectedToServer(true);\n      console.log(\"CONNECTTED TO SERVER\");\n    }, error => {\n      this.connectedToServer(false);\n      console.log(\"FAILED TO CONNECT TO SERVER\");\n    });\n  }\n\n  connectedToServer(connected) {\n    if (connected) {\n      //CONNECTED TO SERVER\n      console.log(\"PeviousOrder.data ->\" + Object.keys(this.state.response));\n\n      if (this.state.response) {\n        this.setState({\n          connected: true\n        });\n      } else {// Connected TO SERVER, BUT DID NOT SUCESSFULL SIGNUP\n      }\n    } else {// DID NOT CONNECT TO SERVER\n      }\n  }\n\n  onChange(pageNumber) {\n    console.log(\"Page: \", pageNumber);\n  }\n\n  componentDidMount() {\n    this.previousOrderFetch({\n      username: this.props.username\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        style: {\n          color: \"#333\",\n          fontWeight: \"normal\"\n        },\n        children: \"Previous Orders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniItemRow, {\n        items: [{}]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        defaultCurrent: 1,\n        total: 200,\n        onChange: this.onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default PreviousOrders;","map":{"version":3,"sources":["/Users/nolanschneider/Programming/e-commerce/src/Components/PreviousOrders.js"],"names":["React","MiniItemRow","MiniItem","Row","Col","Divider","Button","Pagination","style","background","padding","PreviousOrders","Component","constructor","props","state","connected","response","previousOrderFetch","PREVIOUS_ORDER","mysqlServer","serverRoute","fetch","JSON","stringify","then","res","json","result","stringJSON","console","log","parse","setState","connectedToServer","error","Object","keys","onChange","pageNumber","componentDidMount","username","render","color","fontWeight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport MiniItemRow from \"./MiniItemRow.js\";\nimport MiniItem from \"./MiniItem.js\";\nimport \"./CSS_FILES/MiniItem.css\";\nimport { Row, Col, Divider } from \"antd\";\nimport { Button } from \"antd\";\nimport { Pagination } from \"antd\";\n\n\n\nconst style = { background: \"#0092ff\", padding: \"8px 0\" };\n\nclass PreviousOrders extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        connected:false,\n        response:null\n    }\n}\n\npreviousOrderFetch(PREVIOUS_ORDER){\n    let mysqlServer=\"http://ec2-3-16-215-130.us-east-2.compute.amazonaws.com:8081\";\n    let serverRoute=\"/PreviousOrders:\";\n    //console.log(PREVIOUS_ORDER)\n    fetch( mysqlServer + serverRoute + \"\" +JSON.stringify(PREVIOUS_ORDER) + \"\" )\n    .then(res => res.json())\n    .then(\n      (result) => {\n       let stringJSON = \"{\\\"data\\\": \" + JSON.stringify(result) +  \"}\"\n       console.log(stringJSON);\n       stringJSON = JSON.parse(stringJSON)\n\n       //console.log(stringJSON)\n       //let resultJSON = JSON.parse(stringJSON)\n          //console.log(\"Reponse -> \" + JSON.parse(stringJSON))\n          \n        this.setState({\n            response:stringJSON,\n        });\n        this.connectedToServer(true);\n        console.log(\"CONNECTTED TO SERVER\");\n  \n      },\n      (error) => {\n       this.connectedToServer(false);\n        console.log(\"FAILED TO CONNECT TO SERVER\");\n\n      }\n    )\n  }\nconnectedToServer(connected){\n    if(connected){\n        //CONNECTED TO SERVER\n        console.log(\"PeviousOrder.data ->\" + Object.keys(this.state.response))\n        if(this.state.response){\n            this.setState(\n                {\n                    connected:true\n                }\n            );\n        }else{\n            // Connected TO SERVER, BUT DID NOT SUCESSFULL SIGNUP\n        }\n    }else{\n        // DID NOT CONNECT TO SERVER\n    }\n}\nonChange(pageNumber) {\n  console.log(\"Page: \", pageNumber);\n}\ncomponentDidMount(){\n  this.previousOrderFetch({username:this.props.username});\n}\n  render() {\n    return (\n      <div>\n        <Divider orientation=\"left\" style={{ color: \"#333\", fontWeight: \"normal\" }}>\n          Previous Orders\n        </Divider>\n        <MiniItemRow items={[{}]} />\n        <Pagination defaultCurrent={1} total={200} onChange={this.onChange} />\n      </div>\n    );\n  }\n}\nexport default PreviousOrders;\n"]},"metadata":{},"sourceType":"module"}